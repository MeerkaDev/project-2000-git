Git - отдельная консольная программа выполняющая функции системы контроля
версий, такие системы позволяют хранить историю изменений основанную на точках
сохранений (commit), предоставляют команды навигации по этой истории и
сравнения различных точек сохранения, позволяет работать с проектом параллельно
в нескольких разных состояниях (ветки) и объединять эти состояния по мере
необходимости.
Git репозиторием называется папка относительно которой будет
храниться история и отслеживаться изменения, внутри этой папки будет создана
новая папка с названием `.git`, непосредственно в ней и будет храниться вся
история, если её удалить то история безвозвратно пропадет.

`git init` - выполнение данной команды создает новый репозиторий относительно
каталога в котором она выполняется.

`git status` - выводит информацию об актуальном состоянии репозитория,
такой как название текущей ветки, файлы по которым отслеживаются изменения,
режим работы репозитория на момент выполнения команды и так далее.

`git add` - добавляет файлы для дальнейшего сохранения в истории изменений,
при выполнении сохранения (commit) файл будет записан в состоянии в котором он
находился на момент выполнения команды git add.

`git config user.name/git config user.email` - данные команды позволяют
задать конфигурационные параметры user.name и user.email хранящие в себе
имя и email разработчика вносящего изменения в историю.

`git commit -m <message>` - формирует новую точку сохранения с изменениями
файлов добавленных ранее через git add. При выполнении команды обязательным
является небольшое пояснительное сообщение для создаваемой точки сохранения.

При разработке проекта на любом языке программирования зачастую в папке проекта
хранятся файлы наличие которых в репозитории будет избыточным, к таким файлам
относится вся локальная конфигурация проекта, результаты компиляции и так далее.
Избежать наличия лишних файлов в репозитории можно через добавление их названий
в специальный файл `.gitignore`.

Веткой в репозитории называются параллельно его существующие состояния.
Каждая ветка имеет свою точку сохранения (commit) в которой она была создана.
Данная точка сохранения будет считаться отправной для ветки.
Каждая ветка имеет общую историю с другими (так как они создаются на основе
друг друга), но с момента создания новой ветки их история может отличаться.

`git branch -v` - выводит список всех веток существующих в репозитории на
момент выполнения команды.

`git branch <name>` - создает новую ветку и в качестве ее отправной точки
сохранения возьмет последнюю точку сохранения актуальной ветки (ветка на
которой репозиторий находится) в момент выполнения команды.

`git checkout <name>` - переключает репозитории на указанную ветку.